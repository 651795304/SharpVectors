<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpVectors.Core</name>
    </assembly>
    <members>
        <member name="T:SharpVectors.Dom.CssConstants">
            <summary>
            This interface defines constants for CSS.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssPrimitiveType">
            <summary>
            The CssPrimativeType Enum Class contains the list of possible primitive 
            value types in CSS.  This class is an extension of the CSS spec. The CSS 
            spec has a list of constants instead of an enum class.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Unknown">
            <summary>
            The value is not a recognized CSS2 value. The value can only be obtained by using the cssText attribute.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Number">
            <summary>
            The value is a simple number. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Percentage">
            <summary>
            The value is a percentage. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ems">
            <summary>
            The value is a length (ems). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Exs">
            <summary>
            The value is a length (exs). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Px">
            <summary>
            The value is a length (px). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Cm">
            <summary>
            The value is a length (cm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Mm">
            <summary>
            The value is a length (mm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.In">
            <summary>
            The value is a length (in). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Pt">
            <summary>
            The value is a length (pt). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Pc">
            <summary>
            The value is a length (pc). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Deg">
            <summary>
            The value is an angle (deg). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Rad">
            <summary>
            The value is an angle (rad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Grad">
            <summary>
            The value is an angle (grad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ms">
            <summary>
            The value is a time (ms). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.S">
            <summary>
            The value is a time (s). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Hz">
            <summary>
            The value is a frequency (Hz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.KHz">
            <summary>
            The value is a frequency (kHz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Dimension">
            <summary>
            The value is a number with an unknown dimension. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.String">
            <summary>
            The value is a STRING. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Uri">
            <summary>
            The value is a URI. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ident">
            <summary>
            The value is an identifier. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Attr">
            <summary>
            The value is a attribute function. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Counter">
            <summary>
            The value is a counter or counters function. The value can be obtained by using the getCounterValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Rect">
            <summary>
            The value is a rect function. The value can be obtained by using the getRectValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.RgbColor">
            <summary>
            The value is a RGB color. The value can be obtained by using the getRGBColorValue method.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssRuleType">
            <summary>
                The CssRuleType Enum Class contains the possible Rule Type
                Values.  This is an extension of the CSS spec.  The spec
                contains only a list of contstant in the CssRule Interface. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.UnknownRule">
            <summary>
            The rule is a CSSUnknownRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.StyleRule">
            <summary>
            The rule is a CSSStyleRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.CharsetRule">
            <summary>
            The rule is a CSSCharsetRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.ImportRule">
            <summary>
            The rule is a CSSImportRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.MediaRule">
            <summary>
            The rule is a CSSMediaRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.FontFaceRule">
            <summary>
            The rule is a CSSFontFaceRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.PageRule">
            <summary>
            The rule is a CSSPageRule.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssValueType">
            <summary>
            The CssValueType Enum Class contains the possible Css Value
            Types.  This is an extension to the CSS spec.  The spec has
            a list of constants defined within the ICssValue Interface 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.Inherit">
            <summary>
            The value is inherited and the cssText contains "inherit".
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.PrimitiveValue">
            <summary>
            The value is a primitive value and an instance of the 
            CSSPrimitiveValue interface can be obtained by using 
            binding-specific casting methods on this instance of 
            the CSSValue interface.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.ValueList">
            <summary>
            The value is a CSSValue list and an instance of the 
            CSSValueList interface can be obtained by using 
            binding-specific casting methods on this instance 
            of the CSSValue interface.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.Custom">
            <summary>
            The value is a custom value.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssCharsetRule">
            <summary>
            The CSSCharsetRule interface represents a @charset rule in a CSS style sheet. The value of the 
            encoding attribute does not affect the encoding of text data in the DOM objects; this encoding is 
            always UTF-16. After a stylesheet is loaded, the value of the encoding attribute is the value found in the 
            @charset rule. If there was no @charset in the original document, then no CSSCharsetRule is created. 
            The value of the encoding attribute may also be used as a hint for the 
            encoding used on serialization of the style sheet. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCharsetRule.Encoding">
            <summary>
            The encoding information used in this @charset rule.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            SYNTAX_ERR: Raised if the specified encoding value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            NO_MODIFICATION_ALLOWED_ERR: Raised if this encoding rule is readonly.
            </exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssColor">
            <summary>
            The RGBColor interface is used to represent any RGB color value. This interface reflects the 
            values in the underlying style property. Hence, modifications made to the 
            CSSPrimitiveValue objects modify the style property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Name">
            <summary>
            Gets the name of the color, if available.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Alpha">
            <summary>
            This attribute is used for the alpha value of the RGBA color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Red">
            <summary>
            This attribute is used for the red value of the RGB color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Green">
            <summary>
            This attribute is used for the green value of the RGB color.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Blue">
            <summary>
            This attribute is used for the blue value of the RGB color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.HasAlpha">
            <summary>
            Gets a value which indicates whether the color value has alpha value or not.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.IsSystemColor">
            <summary>
            Gets a value which indicates whether the color is system-defined color.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssCounter">
            <summary>
            The Counter interface is used to represent any counter or 
            counters function value. This interface reflects the values 
            in the underlying style property.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.Separator">
            <summary>
            This attribute is used for the separator of the nested counters.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.ListStyle">
            <summary>
            This attribute is used for the style of the list.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.Identifier">
            <summary>
            This attribute is used for the identifier of the counter.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssFontFaceRule">
            <summary>
            The CSSFontFaceRule interface represents a @font-face rule in a CSS style sheet. 
            The @font-face rule is used to hold a set of font descriptions. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssFontFaceRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssImportRule">
            <summary>
            The CSSImportRule interface represents a @import rule within a CSS style sheet. 
            The @import rule is used to import style rules from other style sheets. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.StyleSheet">
            <summary>
            The style sheet referred to by this rule, if it has been loaded. The value of this attribute 
            is null if the style sheet has not yet been loaded or if it will not be loaded (e.g. if the 
            style sheet is for a media type not supported by the user agent).
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.Media">
            <summary>
            A list of media types for which this style sheet may be used.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.Href">
            <summary>
            The location of the style sheet to be imported. The attribute will not contain the 
            "url(...)" specifier around the URI.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssMediaRule">
            <summary>
            The CSSMediaRule interface represents a @media rule in a CSS style sheet. 
            A @media rule can be used to delimit style rules for specific media types
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssMediaRule.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the media block.
            </summary>
            <param name="index">The index within the media block's rule collection of the rule to remove.</param>
            <exception cref="T:SharpVectors.Dom.DomException">
            INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the media rule list.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssMediaRule.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the media block.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both 
            the selector and the style declaration. For at-rules, this specifies both the at-identifier 
            and the rule content.
            </param>
            <param name="index">The index within the media block's rule collection of the rule before which 
            to insert the specified rule. If the specified index is equal to the length of the media blocks's 
            rule collection, the rule will be added to the end of the media block.
            </param>
            <returns>The index within the media block's rule collection of the newly inserted rule</returns>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssMediaRule.CssRules">
            <summary>
            A list of all CSS rules contained within the media block.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssMediaRule.Media">
            <summary>
            A list of media types for this rule
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssPageRule">
            <summary>
            The CSSPageRule interface represents a @page rule within a CSS style sheet. 
            The @page rule is used to specify the dimensions, orientation, margins, etc. of a page box for paged media. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPageRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPageRule.SelectorText">
            <summary>
            The parsable textual representation of the page selector for the rule.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssPrimitiveValue">
            <summary>
            The CSSPrimitiveValue interface represents a single CSS value. 
            This interface may be used to determine the value of a specific
            style property currently set in a block or to set a specific 
            style property explicitly within the block. An instance of this 
            interface might be obtained from the getPropertyCSSValue method
            of the CSSStyleDeclaration interface. A CSSPrimitiveValue object
            only occurs in a context of a CSS property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPrimitiveValue.PrimitiveType">
            <summary>
            The type of the value as defined by the constants specified above.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.SetFloatValue(SharpVectors.Dom.Css.CssPrimitiveType,System.Double)">
            <summary>
            A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised
            </summary>
            <param name="unitType">A unit code as defined above. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <param name="floatValue">The new float value.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the attached property doesn't support the float value or the unit type.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetFloatValue(SharpVectors.Dom.Css.CssPrimitiveType)">
            <summary>
            This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised.
            </summary>
            <param name="unitType">A unit code to get the float value. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <returns>The float value in the specified unit.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float value or if the float value can't be converted into the specified unit.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.SetStringValue(SharpVectors.Dom.Css.CssPrimitiveType,System.String)">
            <summary>
            A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.
            </summary>
            <param name="stringType">A string code as defined above. The string code can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT, and CSS_ATTR).</param>
            <param name="stringValue">The new string value.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value or if the string value can't be converted into the specified unit.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetStringValue">
            <summary>
            This method is used to get the string value. If the CSS value doesn't contain a string value, a DOMException is raised.
            Note: Some properties (like 'font-family' or 'voice-family') convert a whitespace separated list of idents to a string.
            </summary>
            <returns>The string value in the current unit. The current primitiveType can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT and CSS_ATTR).</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetCounterValue">
            <summary>
            This method is used to get the Counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface
            </summary>
            <returns>The Counter value</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Counter value (e.g. this is not CSS_COUNTER).</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetRectValue">
            <summary>
            This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.
            </summary>
            <returns>The Rect value</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Rect value. (e.g. this is not CSS_RECT).</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetRgbColorValue">
            <summary>
            This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.
            </summary>
            <returns>the RGB color value.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the attached property can't return a RGB color value (e.g. this is not CSS_RGBCOLOR).</exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRect">
            <summary>
            The Rect interface is used to represent any rect value. This
            interface reflects the values in the underlying style 
            property. Hence, modifications made to the CSSPrimitiveValue
            objects modify the style property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Left">
            <summary>
            This attribute is used for the left of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Bottom">
            <summary>
            This attribute is used for the bottom of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Right">
            <summary>
            This attribute is used for the right of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Top">
            <summary>
            This attribute is used for the top of the rect.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRule">
            <summary>
            The CSSRule interface is the abstract base interface for any type of CSS statement. 
            This includes both rule sets and at-rules. An implementation is expected to preserve all rules 
            specified in a CSS style sheet, even if the rule is not recognized by the parser. 
            Unrecognized rules are represented using the <see cref="T:SharpVectors.Dom.Css.ICssUnknownRule"/> interface. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.ParentStyleSheet">
            <summary>
            The type of the rule, as defined above. The expectation is that binding-specific casting methods 
            can be used to cast down from an instance of the CSSRule interface to the specific derived 
            interface implied by the type.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.ParentRule">
            <summary>
            The style sheet that contains this rule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.Type">
            <summary>
            If this rule is contained inside another rule (e.g. a style rule inside an @media block), this is the 
            containing rule. If this rule is not nested inside any other rules, this returns null
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule and not its initial value.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax 
            error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_MODIFICATION_ERR: Raised if the specified CSS string value 
            represents a different type of rule than the current one.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at this 
            point in the style sheet.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if the rule is readonly.</exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRuleList">
            <summary>
            The CSSRuleList interface provides the abstraction of an 
            ordered collection of CSS rules. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRuleList.Length">
            <summary>
            The number of CSSRules in the list. The range of valid child rule indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRuleList.Item(System.UInt64)">
            <summary>
            Used to retrieve a CSS rule by ordinal index. The order in this collection represents the 
            order of the rules in the CSS style sheet. If index is greater than or equal to the number 
            of rules in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleDeclaration">
            <summary>
            The CSSStyleDeclaration interface represents a single CSS 
            declaration block. This interface may be used to determine 
            the style properties currently set in a block or to set 
            style properties explicitly within the block. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.SetProperty(System.String,System.String,System.String)">
            <summary>
            Used to set a property value and priority within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <param name="value">The new value of the property.</param>
            <param name="priority">The new priority of the property (e.g. "important").</param>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Used to retrieve the priority of a CSS property (e.g. the "important" qualifier) if the property has been explicitly set in this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>A string representing the priority (e.g. "important") if one exists. The empty string if none exists.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.RemoveProperty(System.String)">
            <summary>
            Used to remove a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyCssValue(System.String)">
            <summary>
            Used to retrieve the object representation of the value of a CSS property if it has been explicitly set within this declaration block. This method returns null if the property is a shorthand property. Shorthand property values can only be accessed and modified as strings, using the getPropertyValue and setProperty methods.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns null if the property has not been set.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyValue(System.String[])">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyNames">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not attached to a CSSRule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block. The range of valid indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or a property is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.Item(System.UInt64)">
            <summary>
            Used to retrieve the properties that have been explicitly set in this declaration block. The order of the properties retrieved using this method does not have to be the order in which they were set. This method can be used to iterate over all properties in this declaration block.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleRule">
            <summary>
            The CSSStyleRule interface represents a single rule set 
            in a CSS style sheet. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleRule.SelectorText">
            <summary>
            The textual representation of the selector for the rule set. The implementation may have stripped out insignificant whitespace while parsing the selector.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleRule.Style">
            <summary>
            The declaration-block of this rule set.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleSheet">
            <summary>
            The CSSStyleSheet interface is a concrete interface used to 
            represent a CSS style sheet i.e., a style sheet whose 
            content type is "text/css". 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleSheet.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the style sheet.
            </summary>
            <param name="index">The index within the style sheet's rule list of the rule to remove.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleSheet.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</param>
            <param name="index">The index within the style sheet's rule list of the rule before which to insert the specified rule. If the specified index is equal to the length of the style sheet's rule collection, the rule will be added to the end of the style sheet.</param>
            <returns>The index within the style sheet's rule collection of the newly inserted rule.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified index e.g. if an @import rule is inserted after a standard rule set or other at-rule.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleSheet.CssRules">
            <summary>
            The list of all CSS rules contained within the style sheet. This includes both rule sets and at-rules.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleSheet.OwnerRule">
            <summary>
            If this style sheet comes from an @import rule, the ownerRule attribute will contain the CSSImportRule. In that case, the ownerNode attribute in the StyleSheet interface will be null. If the style sheet comes from an element or a processing instruction, the ownerRule attribute will be null and the ownerNode attribute will contain the Node.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssUnknownRule">
            <summary>
            The CSSUnknownRule interface represents an at-rule not supported by this user agent. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssValue">
            <summary>
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValue.CssText">
            <summary>
            A string representation of the current value.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error (according to the attached property) or is unparsable</exception>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of values than the values allowed by the CSS property.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this value is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValue.CssValueType">
            <summary>
            A code defining the type of the value as defined above
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssValueList">
            <summary>
            The CSSValueList interface provides the abstraction of an ordered collection of CSS values.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValueList.Length">
            <summary>
            The number of CSSValues in the list. The range of valid values of the indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValueList.Item(System.UInt64)">
            <summary>
            Used to retrieve a CSSValue by ordinal index. The order in this collection represents the 
            order of the values in the CSS style property. If index is greater than or equal to the number 
            of values in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssView">
            <summary>
            This interface represents a CSS view. The <see cref="M:SharpVectors.Dom.Css.ICssView.GetComputedStyle(System.Xml.XmlElement,System.String)"/> method provides a read only access 
            to the computed values of an element. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssView.GetComputedStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to get the computed style as it is defined in [CSS2].
            </summary>
            <param name="elt">The element whose style is to be computed. This parameter cannot be null.</param>
            <param name="pseudoElt">The pseudo-element or null if none</param>
        </member>
        <member name="T:SharpVectors.Dom.Css.IDocumentCss">
            <summary>
            This interface represents a document with a CSS view.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.IDocumentCss.GetOverrideStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to retrieve the override style declaration for a specified element 
            and a specified pseudo-element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.IDomImplementationCss">
            <summary>
            This interface allows the DOM user to create a CSSStyleSheet outside the context of a document. 
            There is no way to associate the new CSSStyleSheet with a document in DOM Level 2. 
            </summary>
            <remarks>
            This interface should inherit from IDomImplementation but System.Xml does not have 
            this interface, just a class. You can not inherit from a class in an interface.
            </remarks>	
        </member>
        <member name="M:SharpVectors.Dom.Css.IDomImplementationCss.CreateCssStyleSheet(System.String,System.String)">
            <summary>
            Creates a new CSSStyleSheet.
            </summary>
            <param name="title">The advisory title. See also the Style Sheet Interfaces section.</param>
            <param name="media">The comma-separated list of media associated with the new style sheet. 
            See also the Style Sheet Interfaces section.</param>
            <returns>A new CSS style sheet.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Css.IElementCssInlineStyle">
            <summary>
            Inline style information attached to elements is exposed through the style attribute. 
            </summary>
            <remarks>
            This represents the contents of the STYLE attribute for HTML elements (or elements in other 
            schemas or DTDs which use the STYLE attribute in the same way). The expectation is that an 
            instance of the ElementCSSInlineStyle interface can be obtained by using binding-specific casting 
            methods on an instance of the Element interface when the element supports inline CSS style informations. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Css.IElementCssInlineStyle.Style">
            <summary>
            The style attribute
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.AttrChangeType">
            <summary>
            An integer indicating in which way the attribute was changed.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.None">
            <summary>
            No attribute was modified, added nor removed.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Modification">
            <summary>
            The attribute was modified in place.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Addition">
            <summary>
            The attribute was just added.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Removal">
            <summary>
            The attribute was just removed.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventListener">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> delegate is the
            primary way for handling events.
            </summary>
            <remarks>
            <para>
            Users register their event listener on an
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>. The users should also
            remove their <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> from its
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> after they have completed
            using the listener.
            </para>
            <para>
            Copying a <see cref="T:SharpVectors.Dom.INode">INode</see> does not copy the event
            listeners attached to it. Event listeners must be attached to the
            newly created <see cref="T:SharpVectors.Dom.INode">INode</see> afterwards if so desired.
            Therefore, <see cref="T:SharpVectors.Dom.INode">INode</see>s are copied using
            <see cref="!:INode.CloneNode">INode.CloneNode</see> or
            <see cref="!:IRange.CloneContents">IRange.CloneContents</see>, the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>s attached to the
            source <see cref="T:SharpVectors.Dom.INode">INode</see>s are not attached to their copies.
            </para>
            <para>
            Moving a <see cref="T:SharpVectors.Dom.INode">INode</see> does not affect the event
            listeners attached to it. Therefore, when
            <see cref="T:SharpVectors.Dom.INode">INode</see>s are moved using
            <see cref="!:IDocument.AdoptNode">IDocument.AdoptNode</see>,
            <see cref="!:INode.AppendChild">INode.AppendChild</see>, or
            <see cref="!:IRange.ExtractContents">IRange.ExtractContents</see>, the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>s attached to the
            moved <see cref="T:SharpVectors.Dom.INode">INode</see>s stay attached to them.
            </para>
            </remarks>
            <paramref name="e">
            The <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> contains contextual information
            about the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event">event</see>.
            </paramref>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventException">
            <summary>
            Event operations may throw an
            <see cref="T:SharpVectors.Dom.Events.EventException">EventException</see> as specified in their
            method descriptions.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.EventException.Code">
            <summary>
            An integer indicating the type of error generated.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventPhase">
            <summary>
            An integer indicating which phase of the event flow is being processed
            as defined in
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.CapturingPhase">
            <summary>
            (DOM Level 2)
            The current event phase is the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.AtTarget">
            <summary>
            (DOM Level 2)
            The current event is in the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">target phase</see>,
            i.e. it is being evaluated at the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.BubblingPhase">
            <summary>
            (DOM Level 2)
            The current event phase is the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phase</see>.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.ICustomEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface gives access
            to the attributes
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see>.
            </summary>
            <remarks>
            <para>
            It is intended
            to be used by the DOM Events implementation to access the underlying
            current target and event phase while dispatching a custom
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> in the tree; it is also intended to be
            implemented, and not used, by DOM applications.
            </para>
            <para>
            The methods contained in this interface are not intended to be used by
            a DOM application, especially during the dispatch on the Event object.
            Changing the current target or the current phase may conduct into
            unpredictable results of the event flow. The DOM Events implementation
            should ensure that both methods return the appropriate current target
            and phase before invoking each event listener on the current target to
            protect DOM applications from malicious event listeners.
            </para>
            <para>
            Note: If this interface is supported by the event object,
            <see cref="P:SharpVectors.Dom.Events.IEvent.IsCustom">IEvent.IsCustom</see> must return <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ICustomEvent.IsPropagationStopped">
            <summary>
            This method will return <c>true</c> if the method
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">IEvent.StopPropagation</see> has been called
            for this event, <c>false</c> in any other cases. 
            </summary>
            <value>
            <c>true</c> if the event propagation has been stopped in the
            current group.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">
            <summary>
            The
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">IsImmediatePropagationStopped</see>
            method is used by the DOM Events implementation to know if the
            method
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">IEvent.StopImmediatePropagation</see>
            has been called for this event. It returns <c>true</c> if the
            method has been called, <c>false</c> otherwise. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ICustomEvent.SetDispatchState(SharpVectors.Dom.Events.IEventTarget,System.UInt16)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ICustomEvent.SetDispatchState(SharpVectors.Dom.Events.IEventTarget,System.UInt16)">SetDispatchState</see> method is
            used by the DOM Events implementation to set the values of
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see>.
            </summary>
            <remarks>
            It also reset the states of
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsPropagationStopped">IsPropagationStopped</see> and
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">IsImmediatePropagationStopped</see>.
            </remarks>
            <param name="target">
            Specifies the new value for the
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see>
            attribute.
            </param>
            <param name="phase">
            Specifies the new value for the
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IDocumentEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface provides a mechanism by which the user 
            can create an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> object of a type supported by the implementation. 
            It is expected that the <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface will be implemented 
            on the same object which implements the <see cref="T:SharpVectors.Dom.IDocument">IDocument</see> interface in an implementation
            which supports the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> model.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">CreateEvent</see> method is used in
            creating <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>s when it is either
            inconvenient or unnecessary for the user to create an
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> themselves.
            </summary>
            <remarks>
            <para>
            In cases where the implementation provided
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> is insufficient, users may supply
            their own <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> implementations for use
            with the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method. However, the DOM implementation needs access to the
            attributes
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see> to propagate
            appropriately the event in the DOM tree. Therefore users'
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> implementations might need to
            support the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface
            for that effect.
            </para>
            <para>
            Note: For backward compatibility reason, <c>"UIEvents"</c>,
            <c>"MouseEvents"</c>, <c>"MutationEvents"</c>, and
            <c>"HTMLEvents"</c> feature names are valid values for the
            parameter <c>eventType</c> and represent respectively the
            interfaces <c>"UIEvent"</c>, <c>"MouseEvent"</c>,
            <c>"MutationEvent"</c>, and <c>"Event"</c>.
            </para>
            </remarks>
            <param name="eventType">
            The <c>eventType</c> parameter specifies the name of the DOM
            Events interface to be supported by the created event object, e.g.
            <c>"Event"</c>, <c>"MouseEvent"</c>, <c>"MutationEvent"</c> ...
            If the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> is to be dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method the appropriate event init method must be called after
            creation in order to initialize the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            values.  As an example, a user wishing to synthesize some kind of
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> would call
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            with the parameter <c>"UIEvent"</c>. The
            <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">IUiEvent.InitUiEventNs</see>
            method could then be called on the newly created
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> object to set the specific
            type of user interface event to be dispatched,
            {<c>"http://www.w3.org/2001/xml-events"</c>,
            <c>"DOMActivate"</c>} for example, and set its context
            information, e.g.
            <see cref="P:SharpVectors.Dom.Events.IUiEvent.Detail">IUiEvent.Detail</see> in this example.
            </param>
            <returns>
            The newly created event object.
            </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            NOT_SUPPORTED_ERR: Raised if the implementation does not support
            the <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see> interface requested.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Events.IDocumentEvent.CanDispatch(System.String,System.String)">
            <summary>
            Test if the implementation can generate events of a specified type.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> of the
            event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> of the
            event.
            </param>
            <returns>
            <c>true</c> if the implementation can generate and dispatch this
            event type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEvent">
            <summary>
            The Event interface is used to provide contextual information about an
            event to the listener processing the event.
            </summary>
            <remarks>
            An object which implements the <c>IEvent</c> interface is passed as
            the parameter to an <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>.
            More specific context information is passed to event listeners by
            deriving additional interfaces from <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>
            which contain information directly relating to the type of event
            they represent. These derived interfaces are also implemented by
            the object passed to the event listener.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Type">
            <summary>
            (DOM Level 2)
            The name must be an
            <see href="http://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-NCName">NCName</see>
            as defined in
            [<see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/references.html#Namespaces">XML Namespaces</see>]
            and is case-sensitive.
            </summary>
            <remarks>
            The character ":" (colon) should not be used in this attribute.
            If the attribute <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            is different from <c>null</c>, this attribute represents a
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-localname">local name</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Target">
            <summary>
            (DOM Level 2)
            Used to indicate the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>.
            </summary>
            <remarks>
            This attribute contains the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target node</see>
            when used with the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">
            <summary>
            (DOM Level 2)
            Used to indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> whose <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>s 
            are currently being processed.
            </summary>
            <remarks>
            This is particularly useful during the capture and bubbling phases. This attribute could contain the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target node</see>
            or a target ancestor when used with the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.EventPhase">
            <summary>
            (DOM Level 2)
            Used to indicate which phase of event flow is currently being accomplished.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Bubbles">
            <summary>
            (DOM Level 2)
            Used to indicate whether or not an event is a bubbling event.
            </summary>
            <remarks>
            If the event can bubble the value is <c>true</c>, otherwise the value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Cancelable">
            <summary>
            (DOM Level 2)
            Used to indicate whether or not an event can have its default action prevented.
            </summary>
            <remarks>
            If the default action can be prevented the value is <c>true</c>, otherwise the value is <c>false</c>.
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow-cancelation">Default actions and cancelable events</seealso>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.TimeStamp">
            <summary>
            (DOM Level 2)
            Used to specify the time at which the event was created.
            </summary>
            <remarks>
            Due to the fact that some systems may not provide this information the value of <see cref="P:SharpVectors.Dom.Events.IEvent.TimeStamp">TimeStamp</see> 
            may be not available for all events. When not available, a value of <c>0</c> will be returned. Examples of epoch 
            time are the time of the system start or 0:0:0 UTC 1st January 1970.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">
            <summary>
            (DOM Level 3 Experimental)
            The <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event at creation time, or <c>null</c> if it is unspecified.
            </summary>
            <remarks>
            For events initialized with a DOM Level 2 Events method, such as <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEvent</see>, 
            this is always <c>null</c>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.IsCustom">
            <summary>
            (DOM Level 3 Experimental)
            This method will always return <c>false</c>, unless the event implements the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see>
            interface.
            </summary>
            <value>
            <c>true</c> if the event implements the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface. <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.IsDefaultPrevented">
            <summary>
            (DOM Level 3 Experimental)
            This method will return true if the method
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> has been called
            for this event, <c>false</c> otherwise.
            </summary>
            <value>
            <c>true</c> if <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> has been called for this event.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.StopPropagation">
            <summary>
            (DOM Level 2)
            Prevent event listeners of the same group to be triggered.
            </summary>
            <remarks>
            <para>
            This method is used to prevent event listeners of the same group to be triggered but its effect is differed 
            until all event listeners attached on the currentTarget have been triggered. Once it has been called, further 
            calls to that method have no additional effect. 
            </para>
            <para>
            Note: This method does not prevent the default action from being invoked; use preventDefault for that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">
            Event propagation and event groups
            </seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.PreventDefault">
            <summary>
            (DOM Level 2)
            Signify that the event is to be canceled.
            </summary>
            <remarks>
            <para>
            If an event is cancelable, the
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> method is used to
            signify that the event is to be canceled, meaning any default
            action normally taken by the implementation as a result of the
            event will not occur and thus independently of event groups.
            Calling this method for a non-cancelable event has no effect.
            </para>
            <para>
            Note: This method does not stop the event propagation; use
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">StopPropagation</see> or
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">StopImmediatePropagation</see>
            for that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow-cancelation">Default actions and cancelable events</seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">
            <summary>
            (DOM Level 2)
            The <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEvent</see> method is used to initialize
            the value of an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> created through the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see> method. If the method is called 
            several times before invoking <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>,
            only the final invocation takes precedence. If called from a subclass of <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see> 
            interface only the values specified in this method are modified, all other attributes are left unchanged. 
            This method sets the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> attribute to <c>eventTypeArg</c>, 
            and <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> to <c>null</c>. To initialize an event with a 
            local name and namespace URI, use the <see cref="M:SharpVectors.Dom.Events.IEvent.InitEventNs(System.String,System.String,System.Boolean,System.Boolean)">InitEventNs</see> method.
            </remarks>
            <param name="eventTypeArg">Specifies the event type.</param>
            <param name="canBubbleArg">Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.</param>
            <param name="cancelableArg">Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable behavior of the event.</param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.InitEventNs(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            (DOM Level 3 Experimental)
            The <see>InitEventNs</see> method is used to initialize the value
            of an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> created through the
            <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times the event has been
            dispatched. If called multiple times the final invocation takes
            precedence. If a call to <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEventNs</see>
            is made after one of the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> derived
            interfaces' init methods has been called, only the values
            specified in the <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEventNs</see> method
            are modified, all other attributes are left unchanged.
            This method sets the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            attribute to <c>eventTypeArg</c>, and
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> to
            <c>namespaceUriArg</c>.
            </remarks>
            <param name="namespaceUriArg">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if no namespace.
            </param>
            <param name="eventTypeArg">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-localname">local name</see>
            of the event type (see also the description of
            <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>).
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">Specifies whether or not the event's default action can be prevented.</param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">
            <summary>
            (DOM Level 3 Experimental)
            Immediately prevent event listeners of the same group to be triggered.
            </summary>
            <remarks>
            <para>
            This method is used to prevent event listeners of the same group to be triggered and, unlike
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">StopPropagation</see> its effect is immediate. Once it has been called, 
            further calls to that method have no additional effect.
            </para>
            <para>
            Note: This method does not prevent the default action from being
            invoked; use <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> for
            that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">Event propagation and event groups</seealso>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventExceptionCode">
            <summary>
            An integer indicating the type of error generated.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventExceptionCode.UnspecifiedEventTypeErr">
            <summary>
            If the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> was not specified
            by initializing the event before the method was called.
            Specification of the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> as
            <c>null</c> or an empty string will also trigger this exception.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventExceptionCode.DispatchRequestErr">
            <summary>
            If the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> object is already
            dispatched in the tree.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEventListener">
            <summary>
            This interface represents an object that can handle an event dispatched by an <see cref="T:SharpVectors.Dom.Events.IEventTarget"/> object.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventListener.HandleEvent(SharpVectors.Dom.Events.IEvent)">
            <summary>
            A function that is called whenever an event of the specified type occurs.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEventTarget">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> interface is
            implemented by all the objects which could be
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event targets</see>
            in an implementation which supports the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flows">Event flows</see>.
            </summary>
            <remarks>
            <para>
            The interface allows registration, removal or query of event
            listeners, and dispatch of events to an event target.
            </para>
            <para>
            When used with
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>,
            this interface is implemented by all
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target nodes</see>
            and target ancestors, i.e. all DOM <see cref="T:SharpVectors.Dom.INode">INode</see>s of
            the tree support this interface when the implementation conforms to
            DOM Level 3 Events and, therefore, this interface can be obtained by
            using binding-specific casting methods on an instance of the
            <see cref="T:SharpVectors.Dom.INode">Node</see> interface.
            </para>
            <para>
            Invoking multiple times
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.AddEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">AddEventListener</see> or
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean,System.Object)">AddEventListenerNs</see> on the same
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> with the same parameters
            (<c>namespaceUri</c>, <c>type</c>, <c>listener</c>, and
            <c>useCapture</c>) is considered to be a no-op and thus independently
            of the event group. They do not cause the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to be called more
            than once and do not cause a change in the triggering order. In order
            to guarantee that an event listener will be added to the event target
            for the specified event group, one needs to invoke
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListener</see> or
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListenerNs</see> first.
            </para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.AddEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the registration of an event listener in the
            default group and, depending on the <c>useCapture</c> parameter,
            on the capture phase of the DOM event flow or its target and
            bubbling phases. <see cref="!: http://www.w3.org/TR/SVG/interact.html#SVGEvents"/>
            </summary>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> associated
            with the event for which the user is registering. 
            </param>
            <param name="listener">
            The listener parameter takes an object implemented by the user
            which implements the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> interface and
            contains the method to be called when the event occurs.
            </param>
            <param name="useCapture">
            If <c>true</c>, <c>useCapture</c> indicates that the user wishes
            to add the event listener for the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase</see>
            only, i.e. this event listener will not be triggered during the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-phase">target</see>
            and
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phases</see>.
            If <c>false</c>, the event listener will only be triggered during the target and bubbling phases.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the removal of event listeners from the default
            group.
            </summary>
            <remarks>
            Calling <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListener</see>
            with arguments which do not identify any currently registered
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> on the
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> has no effect. 
            </remarks>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> for which
            the user registered the event listener.
            </param>
            <param name="listener">
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to be removed.
            </param>
            <param name="useCapture">
            Specifies whether the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> being removed was
            registered for the capture phase or not. If a listener was
            registered twice, once for the capture phase and once for the
            target and bubbling phases, each must be removed separately.
            Removal of an event listener registered for the capture phase does
            not affect the same event listener registered for the target and
            bubbling phases, and vice versa.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">
            <summary>
            This method allows the dispatch of events into the
            implementation's event model.
            </summary>
            <remarks>
            The
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>
            of the event is the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>
            object on which <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">DispatchEvent</see>
            is called.
            </remarks>
            <param name="evt">
            The event to be dispatched.
            </param>
            <returns>
            Indicates whether any of the listeners which handled the event
            called
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">IEvent.PreventDefault</see>.
            If <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">IEvent.PreventDefault</see>
            was called the returned value is <c>false</c>, else it is
            <c>true</c>.
            </returns>
            <exception cref="T:SharpVectors.Dom.Events.EventException">
            <para>
            UNSPECIFIED_EVENT_TYPE_ERR: Raised if the Event.type was not
            specified by initializing the event before dispatchEvent was
            called. Specification of the Event.type as null or an empty
            string will also trigger this exception.
            </para>
            <para>
            DISPATCH_REQUEST_ERR: Raised if the Event object is already being
            dispatched in the tree.
            </para>
            <para>
            NOT_SUPPORTED_ERR: Raised if the Event object has not been
            created using DocumentEvent.createEvent or does not support the
            interface CustomEvent.
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean,System.Object)">
            <summary>
            This method allows the registration of an event listener in a
            specified group or the default group and, depending on the
            <c>useCapture</c> parameter, on the capture phase of the DOM
            event flow or its target and bubbling phases.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event for which the user is registering.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event for which the user is registering.
            </param>
            <param name="listener">
            The <c>listener</c> parameter takes an object implemented by
            the user which implements the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> interface and
            contains the method to be called when the event occurs.
            </param>
            <param name="useCapture">
            If <c>true</c>, <c>useCapture</c> indicates that the user wishes
            to add the event listener for the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase only</see>,
            i.e. this event listener will not be triggered during the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-phase">target</see>
            and
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phases</see>.
            If <c>false</c>, the event listener will only be triggered
            during the target and bubbling phases.
            </param>
            <param name="evtGroup">
            The object that represents the event group to associate with the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>. Use <c>null</c> to
            attach the event listener to the default group.
            </param>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">
            Event propagation and event groups
            </seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the removal of event listeners from a specified
            group or the default group.
            </summary>
            <remarks>
            Calling
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListenerNs</see> with
            arguments which do not identify any currently registered
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> on the EventTarget
            has no effect.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event for which the user registered the event
            listener.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> associated
            with the event for which the user registered the event listener.
            </param>
            <param name="listener">
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> parameter
            indicates the <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to
            be removed.
            </param>
            <param name="useCapture">
            Specifies whether the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> being removed was
            registered for the capture phase or not. If a listener was
            registered twice, once for the capture phase and once for the
            target and bubbling phases, each must be removed separately.
            Removal of an event listener registered for the capture phase
            does not affect the same event listener registered for the target
            and bubbling phases, and vice versa.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(System.String,System.String)">
            <summary>
            This method allows the DOM application to know if an event
            listener, attached to this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> or one of its
            ancestors, will be triggered by the specified event type during
            the dispatch of the event to this event target or one of its
            descendants.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event.
            </param>
            <returns>
            <c>true</c> if an event listener will be triggered on the
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> with the specified
            event type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(System.String,System.String)">
            <summary>
            This method allows the DOM application to know if this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> contains an event
            listener registered for the specified event type.
            </summary>
            <remarks>
            This is useful for determining at which nodes within a hierarchy
            altered handling of specific event types has been introduced, but
            should not be used to determine whether the specified event type
            triggers an event listener.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event.
            </param>
            <returns>
            <c>true</c> if an event listener is registered on this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> for the specified
            event type, <c>false</c> otherwise.
            </returns>
            <seealso cref="M:SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(System.String,System.String)">WillTriggerNs</seealso>
        </member>
        <member name="T:SharpVectors.Dom.Events.IKeyboardEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> interface provides
            specific contextual information associated with keyboard devices.
            </summary>
            <remarks>
            <para>
            Each keyboard event reference a key using an identifier.
            </para>
            <para>
            Each modifier attribute
            (<see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see>,
            and <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see>) is activated when the
            key modifier is being pressed down or maintained pressed, i.e. the
            modifier attribute is not in use when the key modifier is being
            released.
            </para>
            <para>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> interface, use the
            feature string <c>"KeyboardEvent"</c> as the value of the input
            parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">
            <summary>
            Holds the identifier of the key.
            </summary>
            <remarks>
            <para>
            For a list of possible values, refer to
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/keyset.html#KeySet">Key identifiers for keyboard events</see>.
            </para>
            <para>
            Note: Implementations that are unable to identify a key must use the key identifier "Unidentified".
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">
            <summary>
            Contains an indication of the location of they key on the device.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">
            <summary>
            <c>true</c> if the control (Ctrl) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">
            <summary>
            <c>true</c> if the shift (Shift) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">
            <summary>
            <c>true</c> if the alt (alternative) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">
            <summary>
            <c>true</c> if the meta (Meta) key modifier is activated.
            </summary>
            <remarks>
            Note: The Command key modifier on Macintosh system must be
            represented using this key modifier.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">
            <summary>
            true if the alt-graph (Alt Gr) key modifier is activated. 
            </summary>
            <remarks>
            Note: Some operating systems simulate the alt-graph key modifier
            with the combinaison of alt and ctrl key modifiers.
            Implementations are encouraged to use this modifier instead.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">InitKeyboardEvent</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched if necessary. If called multiple times, the final
            invocation takes precedence. This method has no effect if called
            after the event has been dispatched.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="keyIdentifierArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">KeyIdentifier</see> attribute.
            </param>
            <param name="keyLocationArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">KeyLocation</see> attribute.
            </param>
            <param name="ctrlKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see> attribute.
            </param>
            <param name="shiftKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see> attribute.
            </param>
            <param name="altKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see> attribute.
            </param>
            <param name="metaKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see> attribute.
            </param>
            <param name="altGraphKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see> attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">InitKeyboardEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence. This method has no effect if called after the
            event has been dispatched.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the applications wish to
            have no namespace.
            </param>
            <param name="type">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="keyIdentifierArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">KeyIdentifier</see> attribute.
            </param>
            <param name="keyLocationArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">KeyLocation</see> attribute.
            </param>
            <param name="ctrlKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see> attribute.
            </param>
            <param name="shiftKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see> attribute.
            </param>
            <param name="altKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see> attribute.
            </param>
            <param name="metaKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see> attribute.
            </param>
            <param name="altGraphKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMouseEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> interface provides
            specific contextual information associated with Mouse events.
            </summary>
            <remarks>
            <para>
            In the case of nested elements mouse events are always targeted at
            the most deeply nested element. Ancestors of the targeted element
            may use bubbling to obtain notification of mouse events which
            occur within its descendent elements.
            </para>
            <para>
            Note: To create an instance of the MouseEvent interface, use the
            feature string "MouseEvent" as the value of the input parameter
            used with the DocumentEvent.createEvent method.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ScreenX">
            <summary>
            The horizontal coordinate at which the event occurred relative
            to the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ScreenY">
            <summary>
            The vertical coordinate at which the event occurred relative to
            the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ClientX">
            <summary>
            The horizontal coordinate at which the event occurred relative
            to the DOM implementation's client area.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ClientY">
            <summary>
            The vertical coordinate at which the event occurred relative to
            the DOM implementation's client area.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.CtrlKey">
            <summary>
            <c>true</c> if the control (Ctrl) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ShiftKey">
            <summary>
            <c>true</c> if the shift (Shift) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.AltKey">
            <summary>
            <c>true</c> if the alt (alternative) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.MetaKey">
            <summary>
            <c>true</c> if the meta (Meta) key modifier is activated. 
            </summary>
            <remarks>
            Note: The Command key modifier on Macintosh system must be represented using this key modifier.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.Button">
            <summary>
            During mouse events caused by the depression or release of a mouse
            button, button is used to indicate which mouse button changed
            state.
            </summary>
            <remarks>
            <c>0</c> indicates the normal (in general on the left or
            the one button on Macintosh mice, used to activate a button or
            select text) button of the mouse. <c>2</c> indicates the contextual
            property (in general on the right, used to display a context menu)
            button of the mouse if present. <c>1</c> indicates the extra (in
            general in the middle and often combined with the mouse wheel)
            button. Some mice may provide or simulate more buttons and values
            higher than <c>2</c> could be used to represent such buttons.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.RelatedTarget">
            <summary>
            Used to identify a secondary EventTarget related to a UI event.
            </summary>
            <remarks>
            Currently this attribute is used with the mouseover event to
            indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> which
            the pointing device exited and with the mouseout event to
            indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> which
            the pointing device entered.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.AltGraphKey">
            <summary>
            <c>true</c> if the alt-graph (Alt Gr) key modifier is activated.
            </summary>
            <remarks>
            Note: Some operating systems simulate the alt-graph key modifier
            with the combinaison of alt and ctrl key modifiers.
            Implementations are encouraged to use this modifier instead.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget)">InitMouseEvent</see> method is used
            to initialize the value of a MouseEvent created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched. If called multiple times, the final invocation
            takes precedence. 
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s view.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse click count.
            </param>
            <param name="screenXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen x
            coordinate.
            </param>
            <param name="screenYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen y
            coordinate.
            </param>
            <param name="clientXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client x
            coordinate.
            </param>
            <param name="clientYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client y
            coordinate.
            </param>
            <param name="ctrlKeyArg">
            Specifies whether or not control key was depressed during
            the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="altKeyArg">
            Specifies whether or not alt key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="shiftKeyArg">
            Specifies whether or not shift key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="metaKeyArg">
            Specifies whether or not meta key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="buttonArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse button.
            </param>
            <param name="relatedTargetArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget,System.Boolean)">InitMouseEventNs</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            interface.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the application wish to
            have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s AbstractView.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse click count.
            </param>
            <param name="screenXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen x
            coordinate.
            </param>
            <param name="screenYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen y
            coordinate.
            </param>
            <param name="clientXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client x
            coordinate.
            </param>
            <param name="clientYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client y
            coordinate.
            </param>
            <param name="ctrlKeyArg">
            Specifies whether or not control key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="altKeyArg">
            Specifies whether or not alt key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="shiftKeyArg">
            Specifies whether or not shift key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="metaKeyArg">
            Specifies whether or not meta key was depressed during the Event.
            </param>
            <param name="buttonArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse button.
            </param>
            <param name="relatedTargetArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>.
            </param>
            <param name="altGraphKeyArg">
            Specifies whether or not alt graph key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMutationEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> interface provides specific contextual 
            information associated with Mutation events.
            </summary>
            <remarks>
            Note: To create an instance of the <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> interface, use the
            feature string <c>"MutationEvent"</c> as the value of the input parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see> method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is used to identify a secondary node related to a 
            mutation event.
            </summary>
            <remarks>
            For example, if a mutation event is dispatched to a node indicating that its parent
            has changed, the <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is the changed parent. If an event 
            is instead dispatched to a subtree indicating a node was changed within it, the 
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is the changed node. In the case of the
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see> event it indicates the 
            attribute node which was modified, added, or removed.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> indicates the previous value
            of the attribute node in
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>
            events, and of the <see cref="T:SharpVectors.Dom.ICharacterData">ICharacterData</see>
            node in DOMCharacterDataModified events.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> indicates the new value of the
            attribute node in DOMAttrModified events, and
            of the <see cref="T:SharpVectors.Dom.ICharacterData">ICharacterData</see> node in
            DOMCharacterDataModified events.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> indicates the name of the
            changed attribute node in a
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>
            event.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">
            <summary>
            <c>attrChange</c> indicates the type of change which triggered
            the DOMAttrModified event. The values can be
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>,
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Addition">AttrChangeType.Addition</see>,
            or
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Removal">AttrChangeType.Removal</see>.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">InitMutationEvent</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched if necessary. If called multiple times, the final
            invocation takes precedence.
            </summary>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> attribute. This value may
            be <c>null</c>.
            </param>
            <param name="newValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrNameArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrChangeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">AttrChange</see> attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">InitMutationEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the application wish to
            have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> attribute. This value may
            be <c>null</c>.
            </param>
            <param name="newValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrNameArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrChangeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">AttrChange</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMutationNameEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> interface
            provides specific contextual information associated with Mutation
            name event types.
            </summary>
            <remarks>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> interface,
            use the feature string <c>"MutationNameEvent"</c> as the value of the
            input parameter used with the
            <see cref="!:CreateEvent">CreateEvent</see> method of the
            <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationNameEvent.PrevNamespaceUri">
            <summary>
            The previous value of the
            <see cref="!:RelatedNode">RelatedNode</see>'s namespace URI.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationNameEvent.PrevNodeName">
            <summary>
            The previous value of the
            <see cref="!:RelatedNode">RelatedNode</see>'s nodeName.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">InitMutationNameEvent</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> created
            using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence.
            </summary>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevNamespaceUri">
            Specifies the previous <see cref="!:NamespaceUri">NamespaceUri</see>
            of the related <see cref="T:SharpVectors.Dom.INode">INode</see>. This value may be
            <c>null</c>.
            </param>
            <param name="prevNodeName">
            Specifies the previous <see cref="!:NodeName">NodeName</see> of the
            related Node.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">
            <summary>
            The
            <see cref="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">InitMutationNameEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> created
            using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence. 
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="!:http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the application
            wish to have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevNamespaceUri">
            Specifies the previous
            <see cref="!:INode.NamespaceUri">NamespaceUri</see> of the related
            Node. This value may be <c>null</c>.
            </param>
            <param name="prevNodeName">
            Specifies the previous <see cref="!:INode.NodeName">NodeName</see>
            of the related Node.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.ITextEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> interface provides
            specific contextual information associated with Text Events.
            </summary>
            <remarks>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> interface, use the
            feature string <c>"TextEvent"</c> as the value of the input parameter
            used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITextEvent.Data">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.ITextEvent.Data">Data</see> holds the value of the characters
            generated by the character device. This may be a single
            Unicode character or it may be a string.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITextEvent.InitTextEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ITextEvent.InitTextEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">InitTextEvent</see> method is used
            to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence. This method has no effect if called after the event
            has been dispatched.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">TextEvent</see>'s view.
            </param>
            <param name="dataArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">TextEvent</see>'s data
            attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITextEvent.InitTextEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ITextEvent.InitTextEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">InitTextEventNs</see> method is
            used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence. This method has no effect if called after the event
            has been dispatched. 
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the applications
            wish to have no namespace.
            </param>
            <param name="type">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see>'s view.
            </param>
            <param name="dataArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see>'s data
            attribute
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.ITimeEvent">
            <summary>
            This interface, defined in SMIL Animation: Supported interfaces, provides specific 
            contextual information associated with Time events.
            </summary>
            <remarks>
            <para>The different types of events that can occur are:</para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITimeEvent.View">
            <summary>
            The view attribute identifies the <see cref="T:SharpVectors.Dom.Views.IAbstractView"/> from which the event was generated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITimeEvent.Detail">
            <summary>
            Specifies some detail information about the Event, depending on the type of the event. 
            For this event type, indicates the repeat number for the animation.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITimeEvent.InitTimeEvent(System.String,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            This method is used to initialize the value of a <see cref="T:SharpVectors.Dom.Events.ITimeEvent"/> created through 
            the <see cref="T:SharpVectors.Dom.Events.IDocumentEvent"/> interface. This method may only be called before the 
            <see cref="T:SharpVectors.Dom.Events.ITimeEvent"/> has been dispatched via the dispatchEvent method, though it may 
            be called multiple times during that phase if necessary. If called multiple times, the 
            final invocation takes precedence.
            </summary>
            <param name="typeArg">Specifies the event type.</param>
            <param name="viewArg">Specifies the event's <see cref="T:SharpVectors.Dom.Views.IAbstractView"/>.</param>
            <param name="detailArg">Specifies the event's detail.</param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IUiEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> interface provides specific
            contextual information associated with User Interface events.
            </summary>
            <remarks>
            Note: To create an instance of the <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            interface, use the feature string <c>"UIEvent"</c> as the value of the
            input parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IUiEvent.View">
            <summary>
            The <see cref="P:SharpVectors.Dom.Events.IUiEvent.View">View</see> attribute identifies the
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see> from which the
            event was generated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IUiEvent.Detail">
            <summary>
            Specifies some detail information about the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>, depending on the type of event.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEvent</see> method is used to
            initialize the value of a <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s detail.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEventNs</see> method is used
            to initialize the value of a <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence. 
            </summary>
            <param name="namespaceURI">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the application wish
            not to use namespaces.
            </param>
            <param name="typeArg">
            Specifies the event type (see also the description of the
            <c>type</c> attribute in the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>
            interface).
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s detail.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.KeyLocationCode">
            <remarks>
            Note: In case a DOM implementation wishes to provide new location
            information, all values above the value of this constant can be
            used for that effect and generic DOM applications should consider
            values above the value of this constant as being equivalent to
            <see cref="F:SharpVectors.Dom.Events.KeyLocationCode.Unknown">Unknown</see>.
            </remarks>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Standard">
            <summary>
            The key activation is not distinguished as the left or right
            version of the key, and did not originate from the numeric
            keypad (or did not originate with a virtual key corresponding to
            the numeric keypad). Example: the 'Q' key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Left">
            <summary>
            The key activated is in the left key location (there is more than
            one possible location for this key). Example: the left Shift key
            on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Right">
            <summary>
            The key activation is in the right key location (there is more
            than one possible location for this key). Example: the right
            Shift key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Numpad">
            <summary>
            The key activation originated on the numeric keypad or with a
            virtual key corresponding to the numeric keypad. Example: the
            '1' key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Unknown">
            <summary>
            Implementations can use this constant to indicate that the
            location of the key cannot be determined.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IAttribute">
            <summary>
            Summary description for IAttribute.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.ICDataSection">
            <summary>
            Summary description for ICDataSection.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.ICharacterData">
            <summary>
            Summary description for ICharacterData.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IComment">
            <summary>
            Summary description for IComment.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDocumentFragment">
            <summary>
            Represents a lightweight object that is useful for tree insert operations.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDocumentType">
            <summary>
            Summary description for IDocumentType.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDomConfiguration">
            <summary>
            Summary description for IDomConfiguration.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDomImplementation">
            <summary>
            Summary description for IDomImplementation.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDomTimeStamp">
            <summary>
            The <c>DOMTimeStamp</c> type represents an absolute or relative number of milliseconds, depending on the specification in which it appears.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"/>
        </member>
        <member name="T:SharpVectors.Dom.IElement">
            <summary>
            Summary description for IElement.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.BeginElement">
            <summary>
            Creates a begin instance time for the current time. The new instance time is added 
            to the begin instance times list. 
            <para>
            The behavior of this method is equivalent to BeginElementAt(0).
            </para>
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.BeginElementAt(System.Single)">
            <summary>
            Creates a begin instance time for the current time plus the specified offset. 
            The new instance time is added to the begin instance times list.
            </summary>
            <param name="offset">
            The offset from the current document time, in seconds, at which to begin the element.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.EndElement">
            <summary>
            Creates an end instance time for the current time. The new instance time is added 
            to the end instance times list. 
            <para>
            The behavior of this method is equivalent to EndElementAt(0).
            </para>
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.EndElementAt(System.Single)">
            <summary>
            Creates a end instance time for the current time plus the specified offset. 
            The new instance time is added to the end instance times list.
            </summary>
            <param name="offset">
            The offset from the current document time, in seconds, at which to end the element.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.IElementVisitor">
            <summary>
            Visitor that visits all renderable elements
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IEntityReference">
            <summary>
            Summary description for IEntityReference.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.INode">
            <summary>
            Summary description for INode.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.INodeList">
            <summary>
            Summary description for INodeList.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IProcessingInstruction">
            <summary>
              Represents a processing instruction, which XML defines to keep processor-specific
              information in the text of the document.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IText">
            <summary>
            Summary description for IText.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IDocumentStyle">
            <summary>
            The DocumentStyle interface provides a mechanism by which the style sheets embedded in a document 
            can be retrieved. 
            The expectation is that an instance of the DocumentStyle interface can be obtained by using 
            binding-specific casting methods on an instance of the Document interface. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IDocumentStyle.StyleSheets">
            <summary>
            A list containing all the style sheets explicitly linked into or embedded in a document. 
            For HTML documents, this includes external style sheets, included via the HTML LINK element, 
            and inline STYLE elements. In XML, this includes external style sheets, included via style 
            sheet processing instructions (see [XML-StyleSheet]).
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.ILinkStyle">
            <summary>
            The LinkStyle interface provides a mechanism by which a style sheet can be retrieved from the 
            node responsible for linking it into a document. An instance of the LinkStyle interface can be 
            obtained using binding-specific casting methods on an instance of a linking node (HTMLLinkElement, 
            HTMLStyleElement or ProcessingInstruction in DOM Level 2). 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.ILinkStyle.Sheet">
            <summary>
            The style sheet
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IMediaList">
            <summary>
            The MediaList interface provides the abstraction of an ordered collection of media, without 
            defining or constraining how this collection is implemented. An empty list is the same
            as a list that contains the medium "all". 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Stylesheets.IMediaList.AppendMedium(System.String)">
            <summary>
            Adds the medium newMedium to the end of the list. If the newMedium is already used, it is first removed.
            </summary>
            <param name="newMedium">The new medium to add.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_CHARACTER_ERR: If the medium contains characters that are invalid in the underlying style language.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly</exception>
        </member>
        <member name="M:SharpVectors.Dom.Stylesheets.IMediaList.DeleteMedium(System.String)">
            <summary>
            
            </summary>
            <param name="oldMedium"></param>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NOT_FOUND_ERR: Raised if oldMedium is not in the list.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.Length">
            <summary>
            The number of media in the list. The range of valid media is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.MediaText">
            <summary>
            The parsable textual representation of the media list. This is a comma-separated list of media.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.Item(System.UInt64)">
            <summary>
            Returns the indexth in the list. If index is greater than or equal to the number of media in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IStyleSheet">
            <summary>
            The StyleSheet interface is the abstract base interface for any type of style sheet. It represents a 
            single style sheet associated with a structured document. In HTML, the StyleSheet interface represents 
            either an external style sheet, included via the HTML LINK element, or an inline STYLE element. In XML, 
            this interface represents an external style sheet, included via a style sheet processing 
            instruction. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Media">
            <summary>
            The intended destination media for style information. The media is often specified in the ownerNode. 
            If no media has been specified, the MediaList will be empty. See the media attribute definition for 
            the LINK element in HTML 4.0, and the media pseudo-attribute for the XML style sheet processing 
            instruction . Modifying the media list may cause a change to the attribute disabled.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Title">
            <summary>
            The advisory title. The title is often specified in the ownerNode. See the title attribute definition 
            for the LINK element in HTML 4.0, and the title pseudo-attribute for the XML style sheet processing 
            instruction.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Href">
            <summary>
            If the style sheet is a linked style sheet, the value of its attribute is its location. For inline 
            style sheets, the value of this attribute is null. See the href attribute definition for the LINK 
            element in HTML 4.0, and the href pseudo-attribute for the XML style sheet processing
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.ParentStyleSheet">
            <summary>
            For style sheet languages that support the concept of style sheet inclusion, this attribute represents 
            the including style sheet, if one exists. If the style sheet is a top-level style sheet, or the style 
            sheet language does not support inclusion, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.OwnerNode">
            <summary>
            The node that associates this style sheet with the document. For HTML, this may be the corresponding 
            LINK or STYLE element. For XML, it may be the linking processing instruction. For style sheets that 
            are included by other style sheets, the value of this attribute is null
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Disabled">
            <summary>
            false if the style sheet is applied to the document. true if it is not. Modifying this attribute 
            may cause a new resolution of style for the document. A stylesheet only applies if both an 
            appropriate medium definition is present and the disabled attribute is false. So, if the media 
            doesn't apply to the current user agent, the disabled attribute is ignored.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Type">
            <summary>
            This specifies the style sheet language for this style sheet. The style sheet language is 
            specified as a content type (e.g. "text/css"). The content type is often specified in the 
            ownerNode. Also see the type attribute definition for the LINK element in HTML 4.0, and the 
            type pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IStyleSheetList">
            <summary>
            The StyleSheetList interface provides the abstraction of an ordered collection of style sheets. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheetList.Length">
            <summary>
            The number of StyleSheets in the list. The range of valid child stylesheet indices is 0 to 
            length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheetList.Item(System.UInt64)">
            <summary>
            Used to retrieve a style sheet by ordinal index. If index is greater than or equal to the 
            number of style sheets in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.SvgConstants">
            <summary>
            Define SVG constants, such as tag names, attribute names and URI
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseEventsType">
            <summary>
            The event type for MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.UIEventsType">
            <summary>
            The event type for UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgEventsType">
            <summary>
            The event type for SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeyEventsType">
            <summary>
            The event type for KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeydownEventType">
            <summary>
            The event type for 'keydown' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeypressEventType">
            <summary>
            The event type for 'keypress' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeyupEventType">
            <summary>
            The event type for 'keyup' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.ClickEventType">
            